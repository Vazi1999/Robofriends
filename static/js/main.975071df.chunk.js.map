{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAkBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAKC,EAAgB,EAAhBA,KAAOC,EAAS,EAATA,MAE1B,OACE,yBAAKC,UAAU,kDACf,yBAAKC,IAAI,QAAQC,IAAG,+BAA2BL,EAA3B,cACpB,6BACA,4BAAMC,GACN,2BAAKC,MCYOI,EAnBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEjB,OACA,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACnB,OACC,kBAAC,EAAD,CACCV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCbRK,EAAS,CACpB,CACEP,GAAI,EACJC,KAAM,gBACNU,SAAU,OACVT,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNU,SAAU,YACVT,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNU,SAAU,WACVT,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNU,SAAU,WACVT,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNU,SAAU,SACVT,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNU,SAAU,mBACVT,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNU,SAAU,eACVT,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNU,SAAU,gBACVT,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNU,SAAU,WACVT,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNU,SAAU,iBACVT,MAAO,2BCjDIU,EARG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACC,2BAAOX,UAAU,mDACjBY,KAAK,SAASC,YAAY,qBAC1BC,SAAUH,KC0BGI,G,wDAzBd,aAAc,IAAD,8BACZ,gBAMDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACR,YAAYO,EAAME,OAAOC,SANxC,EAAKC,MAAM,CACXjB,OAAOA,EACPM,YAAY,IAJA,E,qDAYJ,IAAD,OACDY,EAAiBC,KAAKF,MAAMjB,OAAOoB,QAAO,SAAApB,GAChD,OAAOA,EAAON,KAAK2B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAEjE,OACC,yBAAKzB,UAAY,MAChB,wBAAIA,UAAU,YAAY,yBAAKE,IAAI,6EAA6ED,IAAI,QACpH,kBAAC,EAAD,CAAWD,UAAU,MAAMW,aAAcY,KAAKP,iBAC9C,kBAAC,EAAD,CAAUZ,OAASkB,S,GArBLK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACT,kBAAC,EAAD,MACGC,SAASC,eAAe,SD0HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.975071df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id , name , email})=>{\r\n\r\n\treturn(\r\n\t\t\t<div className='bg-light-blue dib pa3 ma2 grow bw2 shadow-5 tc'>\r\n\t\t\t<img alt='Photo' src= {`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t<h2>{ name }</h2>\r\n\t\t\t<p>{ email }</p>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots})=>{\r\n\t\r\n \treturn(\r\n \t<div>\r\n \t{\r\n \t  robots.map((user,i)=>{\r\n\t\treturn (\r\n\t\t\t<Card\r\n\t\t\t id={robots[i].id} \r\n\t\t\t name={robots[i].name} \r\n\t\t\t email={robots[i].email}\r\n\t\t\t  />\r\n\t\t\t  );\r\n \t})\r\n}\r\n \t </div>\r\n \t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue bw1 f3 w-30 mb3' \r\n\t\ttype='search' placeholder='Search for a robot' \r\n\t\tonChange={searchChange}/>\r\n\t\t);\r\n\r\n}\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport CardList from './CardList';\r\nimport { robots } from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\trobots:robots,\r\n\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\r\n\t\t\r\n\t}\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robots=>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div className = 'tc' >\r\n\t\t\t\t<h1 className='f1 w-100' ><img src='https://fontmeme.com/permalink/201005/91bfe6be8ff9b93c0da8dd02e42ef22c.png' alt='H1' /></h1>\r\n\t\t\t\t<SearchBox className='Big' searchChange={this.onSearchChange}/>\r\n\t\t\t\t<CardList robots= {filteredRobots} />\r\n\t\t\t</div>\r\n\t\t);}\r\n\t\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n<App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}